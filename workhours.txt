AOP	AOP and bytecode manipulation
CTRL	Controller
CTX	Contexts and scopes
DB	Database
DEP	Deployment and startup
DOC	Documentation
ENT	Entities
GC	Garbage collection
MISC	Miscellaneous tasks and refactorings
MGMT	Project management
NET	Networking
TASK	Task scheduling
TEST	Testing infrastructure, non-unit tests
TREF	Transparent references
TX	Transactions

15.8.2008 18:55-20:16	1,5h	MISC	* Project structure
17.8.2008 03:22-03:40	0,5h	MISC	* Project structure

17.8.2008 19:52-24:00	4h	TX	Transactions
18.8.2008 00:00-0:32	0,5h	TX	Transactions

18.8.2008 00:32-02:35	2h	DB	Database: blob
18.8.2008 14:56-17:30	2,5h	DB	Database: in-memory database
18.8.2008 22:22-24:00	1,5h	DB	Database: in-memory database
19.8.2008 00:00-01:33	1,5h	DB	Database: in-memory database
19.8.2008 12:55-13:41	1h	DB	Database: in-memory database
19.8.2008 17:32-17:54	0,5h	DB	Database: in-memory database
20.8.2008 16:03-18:19	2h	DB	Database: in-memory database
21.8.2008 13:59-15:25	1,5h	DB	Database: in-memory database
24.8.2008 22:57-24:00	1h	DB	Database: in-memory database
25.8.2008 00:00-01:24	1,5h	DB	Database: in-memory database

25.8.2008 16:16-16:56	0,5h	ENT	Entities: creating references
31.8.2008 13:47-14:10	0,5h	MISC	* Project refactoring: renamed a module, updated copyrights
31.8.2008 15:34-19:27	4h	ENT	Entities: reading references, flushing entities
1.9.2008 13:58-14:19	0,5h	MISC	* Project refactoring: documented the thread-safeness of classes
1.9.2008 14:19-16:39	2h	ENT	Entities: entity storage, serialization
4.9.2008 19:22-21:49	2,5h	ENT	Entities: serialization

4.9.2008 21:49-22:38	1h	TREF	Transparent references: convert JUnit tests to JDave specs
5.9.2008 02:09-02:35	0,5h	MISC	* Minor refactoring, documented the thread-safeness of classes
5.9.2008 15:33-16:22	1h	CTX	Thread context
5.9.2008 16:22-19:51	3,5h	TREF	Transparent references: convert JUnit tests to JDave specs

9.9.2008 15:09-16:43	1,5h	AOP	Bytecode instrumentation: utilities
9.9.2008 16:43-18:21	1,5h	TREF	Transparent references: generate equals and hashCode methods, tref proxy with concrete superclass
9.9.2008 18:21-19:18	1h	AOP	Bytecode instrumentation: java.lang.instrument agent
9.9.2008 21:44-23:47	2h	TREF	Transparent references: tag entities with annotations

9.9.2008 23:47-24:00	0h	MISC	* Project refactoring: reordered packages to limit public API
10.9.2008 00:00-00:54	1h	MISC	* Project refactoring: reordered packages to limit public API

11.9.2008 18:20-19:58	1,5h	DB	Database: multiple database tables
11.9.2008 21:00-23:17	2,5h	DB	Database: multiple database tables

11.9.2008 23:17-24:00	0,5h	MISC	* Project refactoring: reordered packages, removed Entities.getId() from public API, broke Context's dependencies
12.9.2008 00:00-00:19	0,5h	MISC	* Project refactoring: reordered packages, removed Entities.getId() from public API, broke Context's dependencies

12.9.2008 16:14-18:14	2h	DB	Iterating database keys
12.9.2008 18:14-20:23	2h	ENT	Entity bindings, iterating bindings
12.9.2008 20:35-22:57	2,5h	ENT	Entity bindings, accessing entities by ID, iterating entities

13.9.2008 20:00-21:10	1h	CTX	Task scope
13.9.2008 21:10-24:00	3h	TASK	Running tasks, Guice integration
14.9.2008 00:00-01:02	1h	TASK	Running tasks, Guice integration

14.9.2008 (at times)	1h	MISC	* Project refactoring: improved naming and readability

29.9.2008 12:56-13:44	1h	DOC	* Project refactoring: documented transaction isolation levels

3.10.2008 19:05-21:13	2h	DOC	* Writing documentation, updating web site style

17.10.2008 16:44-17:20	0,5h	MISC	* Project refactoring: documented warnings for ThreadContext, TODO items for TaskExecutor
19.10.2008 05:10-06:39	1,5h	MISC	* Project refactoring: improved code readability

29.10.2008 01:35-02:05	0,5h	MISC	* Project refactoring: tidied unchecked casts
30.10.2008 14:09-15:49	1,5h	MISC	* Project refactoring: byte representation of BigInteger

2.11.2008 23:36-24:00	0,5h	MISC	* Project refactoring: refactored public API
3.11.2008 00:00-01:46	1,5h	ENT	# EntityManager refactoring: simplified EntityManager

12.11.2008 21:59-23:47	1,5h	MISC	* Project refactoring: nested task filters
13.11.2008 17:55-18:53	1h	MISC	* Project refactoring: tidied guice modules, fixed EntityIdFactory's scope
17.11.2008 00:20-01:54	1,5h	MISC	* Project refactoring: some additions to project goals, create links from class names automatically, renamed dimdwarf-server module to dimdwarf-core

17.11.2008 12:36-13:28	1h	DOC	* Project refactoring: added specs to web site
18.11.2008 16:10-17:47	1,5h	DB	# InMemoryDatabase refactoring: extracted VolatileDatabase* from InMemoryDatabase
18.11.2008 19:14-20:13	1h	DB	# InMemoryDatabase refactoring: extracted VolatileDatabase* from InMemoryDatabase
19.11.2008 12:39-14:21	1,5h	DB	# InMemoryDatabase refactoring: simplified InMemoryDatabaseTable's locking with GroupLock
19.11.2008 14:49-16:31	2h	MISC	* Project refactoring: begun using JSR 305 annotations
20.11.2008 18:18-24:00	5,5h	DB	# InMemoryDatabase refactoring: refactored revision management of InMemoryDatabase
21.11.2008 00:00-01:23	1,5h	DB	# InMemoryDatabase refactoring: refactored revision management of InMemoryDatabase
21.11.2008 12:38-13:39	1h	DB	# InMemoryDatabase refactoring: extracted InMemoryDatabaseManager from InMemoryDatabase

24.11.2008 20:05-24:00	4h	TASK	Task scheduling
25.11.2008 00:00-01:33	1,5h	TASK	Task scheduling
25.11.2008 15:27-19:03	3,5h	TASK	Task scheduling: transactions
25.11.2008 22:05-24:00	2h	TASK	Task scheduling: cancelling tasks with ScheduledFuture
26.11.2008 00:00-00:36	0,5h	TASK	Task scheduling: cancelling tasks with ScheduledFuture
26.11.2008 19:49-24:00	4h	TASK	Task scheduling: refactored TaskScheduler to use RecoverableSet and allow takes outside task context, TaskThreadPool
27.11.2008 00:00-01:54	2h	TASK	Task scheduling: TaskThreadPool
27.11.2008 21:05-24:00	3h	TASK	Task scheduling: await until all running tasks have ended (TaskThreadPool), fixed concurrency bugs in tests, refactored tests
28.11.2008 00:00-03:04	3h	TASK	Task scheduling: integration testing, task scheduling modules, finding and fixing concurrency bugs, made tests more robust

29.11.2008 21:25-24:00	2,5h	GC	Garbage collecting: MockGraph, ConcurrentMarkSweepCollector
30.11.2008 00:00-01:07	1h	GC	Garbage collecting: ConcurrentMarkSweepCollector
30.11.2008 21:58-24:00	2h	GC	Garbage collecting: ConcurrentMarkSweepCollector, EntityGraph
1.12.2008 00:00-0:34	0,5h	MISC	* Project refactoring: refactored threading in tests
2.12.2008 17:48-18:14	0,5h	TASK	# Task scheduling: fixed concurrency bugs in tests
2.12.2008 19:50-22:26	2,5h	GC	Garbage collecting: metadata for database entries
2.12.2008 22:58-23:27	0,5h	MISC	* Project refactoring: renamed and reordered entity/binding database classes to *Repository and *Dao
3.12.2008 19:50-24:00	4h	GC	Garbage collecting: EntityGraph, transactionally isolated IterableKeys
10.12.2008 18:36-22:00	3,5h	GC	Garbage collecting: GC integration, running incremental tasks
10.12.2008 22:00-24:00	2h	TASK	# Task scheduling: refactored SchedulingControl to be the top level object
11.12.2008 00:00-00:21	0,5h	GC	Garbage collecting: GC integration
11.12.2008 15:29-22:28	7h	GC	Garbage collecting: notify GC about reference mutations
12.12.2008 12:38-17:48	5h	GC	Garbage collecting: GC integration (mutator listeners)
13.12.2008 17:30-18:54	1,5h	TASK	Task scheduling improvements: retry limits for failing tasks
13.12.2008 18:54-19:29	0,5h	GC	Garbage collecting: run GC without producing garbage
13.12.2008 19:50-21:41	2h	TASK	Task scheduling improvements: retry limits for failing tasks, only transaction conflict exceptions may cause retry (refactored GroupLock)
13.12.2008 21:41-23:14	1,5h	GC	Garbage collecting: run GC without producing garbage
14.12.2008 13:26-13:52	0,5h	GC	Garbage collecting: got rid of DatabaseTableWithMetadata.getMetaTable
18.12.2008 16:13-16:56	0,5h	MISC	* Project refactoring: separeted dimdwarf-api-internal to its own module (for Darkstar integration), reduced dependencies to EntityObject
24.12.2008 17:39-18:26	1h	MISC	* Project refactoring: made AOP agent more configurable for Darkstar integration
27.12.2008 16:40-18:40	2h	ENT	Entity improvements: generate equals/hashCode only for annotated entity classes, do not update unmodified entities to database
27.12.2008 18:40-21:05	2,5h	ENT	Entity improvements: do not require entities using concrete-baseclass-proxies to have an accessible default constructor
27.12.2008 21:05-23:40	2,5h	MISC	* Project refactoring: switching over to Git
18.1.2009 18:10-19:38	1,5h	TASK	Task scheduling improvements: single-threaded execution mode for repeatedly failing tasks
18.1.2009 19:38-20:05	0,5h	MISC	* Project refactoring: updated license and copyright statements
--

24.4.2009 16:30-17:20	1h	MISC	* Project refactoring: begun using Mockito
1.6.2009 00:23-00:51	0,5h	TREF	# Transparent references: refactoring
12.8.2009 16:09-16:43	0,5h	ENT	# Entities: refactoring, created EntityApi
13.8.2009 13:52-15:49	2h	ENT	# Entities: refactoring, created EntityId
13.8.2009 15:49-17:05	1,5h	MISC	* Project refactoring: removed current GC impl and database metadata support, because the new architecture can not reuse them
17.8.2009 22:41-23:27	1h	MISC	* Project refactoring: upgraded dependencies, use Guice 2.0 features
17.8.2009 23:27-24:00	0,5h	CTX	# Thread context: extracted reusable ThreadScope from TaskScope
18.8.2009 00:00-00:23	0,5h	CTX	# Thread context: extracted reusable ThreadScope from TaskScope
23.1.2010 15:15-15:44	0,5h	MISC	* Project refactoring: updated dependencies, tried javax.inject
11.2.2010 14:15-15:16	1h	MISC	* Generate a list of authors based on the version history
13.5.2010 20:05-23:02	3h	MISC	* Project refactoring: name interfaces after roles, avoid *Impl, remove @author and @since, switch to Apache License 2.0
14.5.2010 00:35-01:54	1,5h	TEST	End-to-end testing infrastructure
14.5.2010 02:25-03:29	1h	TEST	End-to-end testing infrastructure
9.6.2010 20:43-00:35	4h	TEST	End-to-end testing infrastructure
10.6.2010 19:09-21:26	2h	DEP	Launching the server
10.6.2010 22:18-00:00	2h	DEP	Launching the server
11.6.2010 00:00-01:12	1h	NET	Skeleton for SimpleSgsProtocol
12.6.2010 13:06-14:26	1,5h	MISC	* Scripts for manual CI
12.6.2010 21:06-22:09	1h	DOC	Documentation for CI script and launcher module
15.6.2010 01:39-02:27	2h	DEP	Separated bootstrap libraries from others, made agent.jar self-contained
15.6.2010 19:11-21:33	2,5h	TEST	End-to-end tests: wait for the server to start before trying to connect to it
15.6.2010 21:33-22:37	1h	NET	Use MINA's ProtocolCodec
15.6.2010 23:17-23:55	0,5h	TEST	Fixed the high latency in StreamWatcher caused by the use of a regular PipedOutputStream
18.6.2010 00:27-01:50	1,5h	MISC	Startup performance measurements, improved end-to-end tests, improved main class, improved build scripts
20.6.2010 09:51-10:38	1h	MISC	Reorganized project structure - separate dist modules from core libraries
19.7.2010 14:44-16:25	1,5h	ENT	# Serialization refactoring: simplified ObjectSerializer
19.7.2010 23:37-00:07	0,5h	ENT	# Serialization refactoring: simplified serialization filters
29.7.2010 16:40-17:42	1h	TEST	# Refactored ServerRunner by extracting ProcessRunner
31.7.2010 23:46-01:03	1h	MISC	* Added Scala support to the project
4.8.2010 13:42-15:23	1,5h	NET	Tests for SimpleSgsProtocol
5.8.2010 14:23-16:32	2h	CTRL	Message queue, skeleton for Controller and Bootstrapper
15.8.2010 16:07-18:09	2h	CTRL	Services, extracted authenticator to be its own service
17.8.2010 21:31-23:34	2h	CTRL	Registering services
19.8.2010 15:30-17:00	1,5h	MGMT	Discussing about Dimdwarf with Jussi
19.8.2010 20:30-22:06	1,5h	DOC	Created wiki, documented development environment, moved documentation from web site to wiki
20.8.2010 15:22-17:58	2,5h	CTRL	Registering services/controllers
22.8.2010 19:34-21:34	2h	CTRL	Registering services/controllers, Guice integration
25.8.2010 17:07-22:10	5h	CTRL	Registering services/controllers, Guice integration
26.8.2010 18:57-01:35	6h	CTRL	Starting services, service modules for authenticator and networking, debugging a problem with Guice injection
27.8.2010 11:33-14:55	3h	CTRL	Debugging a problem with Guice injection, fixed direct controller dependencies, refactored services
30.8.2010 14:34-15:02	0,5h	CTRL	Pass parameters to the network module
30.8.2010 15:19-17:25	1,5h	NET	Unit tests for networking

TODO:
- make next end-to-end test pass

NEXT:
	- walking skeleton, infrastructure
!!!		- encoding and decoding of SimpleSgsProtocol messages
			- test compatibility with com.sun.sgs.impl.sharedutil.MessageBuffer
			- compatibility with com.sun.sgs.client.simple.SimpleClient should be covered by end-to-end tests to be sure (also it uses MessageBuffer)
		- creting the Guice Injector
		- parsing command line arguments
		- loading the deployed application
		- compare MINA and Netty by implementing parts of SGS protocol both and doing a performance benchmark
			- session messages: multiple clients sending "ping" messages (measure latency and throughput, min/max/avg)
		- AOP using a classloader instead of agent?
		- /lib/boot for bootstrap libraries? (such as agent)
		- tests for using the agent, if it is useful for app development?
		- deployment tests? http://xpday4.xpday.org/slides/AgileDeployment.pdf
		- optimizations:
			- AOP: if the class is not an entity, it does not need to be transformed, so abort the transformation with an exception and use the original bytes
			- ClassLoading: on JDK7, classloading can be parallelized. detect if the ClassLoader.registerAsParallelCapable method exists and enable the optimization
			- tests for measuring optimization effectiveness:
				- system properties for enabling/disabling optimizations (dimdwarf.enableAop=true, dimdwarf.parallelizeClassLoading=true)
				- detect JDK6/JDK7 in the tests if the optimization works only on one platform, otherwise silently skip the test
				- test: enabling AOP should not slow down startup much
				- test/JDK6: enabling parallelizeClassLoading should not affect startup speed (should not make it 10% worse, as expected)
				- test/JDK7: enabling parallelizeClassLoading should improve startup speed (about 50% faster)
	- prepare to use Scala and Specs
	- new architecture:
		- end-to-end acceptance tests
		- message queue
		- database
		- task scheduling
		- garbage collection (old implementation tagged "old-gc-impl" for reference)
		- message channels
		- client sessions
	- refactor: split dimdwarf-core, prepare separate master and worker modules:
		* dimdwarf-core = blob, message queue, interfaces between master and worker
		* dimdwarf-master = db, scheduler, gc, networking, messages
		* dimwdarf-worker = context, tx, entities, serial
		* dimdwarf-server (?) = starting up the server, application deployment, exit hook on a socket, exiting the server (with System.exit() - it will call shutdown hooks, maybe needed for log flushing (altough apparently Lockback always flushes immediately http://logback.qos.ch/manual/appenders.html#OutputStreamAppender) - on the other hand Runtime.halt() will not call shutdown hooks)
	- misc:
		- api.unsafe package with stuff like manually creating EntityIds and reading the database with them
		- dimwdarf-api-tck for making sure that alternative Dimdwarf implementations work the same way
			The TCK would be a set of test classes (move the tests from end-to-end-tests there?), for which a ServerRunner implementation is provided to run the tests (commands: deploy, start, restart, shutdown, gc). Other implementations should provide implementation specific ways to control the server.
		- startup speed might improve if third-party libraries would not be AOP processed
			Benchmark the system so that all third-party libraries are in /lib/boot
			Maybe rename /lib -> /lib/app-libs (only AOP'd worker module and common libraries) and /lib/boot -> /lib

MILESTONES:
- Single node, in-memory database, capable of running applications for development.
- Single node, persisted database, recovers from a crash.
- Multi node, centralized database, centralized directory, centralized GC etc.
- Multi node, load balancing, scales as servers are added (if Darkstar has solved scaling by then).
- Multi node, rolling upgrades, database refactoring.
- Multi node, distribute one previously centralized subsystem at a time, based on what is the bottleneck (profile first).

TODO FOR OLD ARCHITECTURE:
	- refactor TaskSchedulerImpl
	- refactor ConcurrentMarkSweepCollector (remove DatabaseTableWithMetadata)
	- reference counting collector
	- combined CMS+RC collector integration (run CMS periodically, once every N reference counting epochs)
