<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0101)file:///C:/Documents%20and%20Settings/ORFJackal/Desktop/topic%201299%20-%20Performance%20problems.htm -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		  <!-- <BASE href="http://www.projectdarkstar.com/forum/"> --><!-- <BASE href="."> --><BASE href=".">
  
  <META name="robots" content="index, follow">
  <META name="keywords" content="Project Darkstar, Darkstar, Sun Microsystems, Sun, Java, games, videogames, MMORG, MMOG, MMORPG, massively multiplayer, online, games">
  <META name="description" content="Project Darkstar Community - Community portal for Project Darkstar online game developers">
  
  <TITLE>forum - Project Darkstar Community</TITLE>
  <LINK href="http://www.projectdarkstar.com/favicon.ico" rel="shortcut icon" type="image/x-icon">
  <LINK rel="stylesheet" href="./Performance problems_files/style.css" type="text/css">
  
  
  
		<TITLE>forum - Project Darkstar Community</TITLE>
		<STYLE type="text/css">
			body
			{
				color: black;
				background-color: white;
			}
			body, td, .normaltext
			{
				font-family: Verdana, arial, helvetica, serif;
				font-size: small;
			}
			*, a:link, a:visited, a:hover, a:active
			{
				color: black !important;
			}
			table
			{
				empty-cells: show;
			}
			.code
			{
				font-size: x-small;
				font-family: monospace;
				border: 1px solid black;
				margin: 1px;
				padding: 1px;
			}
			.quote
			{
				font-size: x-small;
				border: 1px solid black;
				margin: 1px;
				padding: 1px;
			}
			.smalltext, .quoteheader, .codeheader
			{
				font-size: x-small;
			}
			.largetext
			{
				font-size: large;
			}
			hr
			{
				height: 1px;
				border: 0;
				color: black;
				background-color: black;
			}
		</STYLE>
		
		
		
		
		

		<LINK rel="stylesheet" href="./Performance problems_files/template_css.css" type="text/css">		<LINK rel="shortcut icon" href="http://www.projectdarkstar.com/templates/pw_inner_template/images/favicon.ico">
		<LINK rel="alternate" title="Darkstar News" href="http://www.projectdarkstar.com/feeds/rss.php" type="application/rss+xml">
                <LINK rel="alternate" title="Darkstar Forums" href="http://www.projectdarkstar.com/forum/?type=rss;action=.xml" type="application/rss+xml">

		
		<!--[if lte IE 7]>
			<link rel="stylesheet" type="text/css" href="http://www.projectdarkstar.com/templates/pw_inner_template/css/template_ie_css.css" media="all"/>
		<![endif]-->

	<LINK rel="stylesheet" type="text/css" href="./Performance problems_files/widget20.css" media="all"></HEAD><BODY onload="styleSideNav(); ">
               <!-- <div style="position: absolute; top: 20px; right:25%;  z-index: 3;" ><a href="http://www.surveymonkey.com/s.aspx?sm=6DJisqUXMF7fqpORpXRzyA_3d_3d"><img border="0" src="/images/FeedbackRequest.png" TITLE=" Click Here For More Details "></a></div> -->
		<DIV class="banner_back"></DIV>
		<DIV id="centered" style="height: 100%;">
			<DIV id="container">
				<DIV id="header">
					<MAP name="banner_img">
						<AREA href="http://www.projectdarkstar.com/" alt="home page" title="home" shape="rect" coords="18,71, 279,95">
					</MAP>
					<IMG id="h_img" src="./Performance problems_files/header_full.jpeg" usemap="#banner_img" alt="Project Darkstar Banner">
<DIV class="top_right">&nbsp;&nbsp;
<A href="http://www.projectdarkstar.com/login.html">Login</A>&nbsp;&nbsp;</DIV>

					<DIV id="h_nav">&nbsp;
						<DIV class="clear"></DIV>
					</DIV>
					<DIV class="navs">
						<DIV id="navcontainer">
<DIV id="navlist">
<DIV id="menu_item_139" class="menu_item" style="width: 5.88%; left: 0%;"><A href="http://www.projectdarkstar.com/" onmouseout="hide(139);" onmouseover="show(139);" class="images">Home</A><DIV class="dropMenu" onmouseout="hide(139);" onmouseover="hold(139);" id="drop_139" style="display: none; "><UL><LI><A href="http://www.projectdarkstar.com/learn.html" class="imagestier1">Learn</A></LI>
<LI><A href="http://www.projectdarkstar.com/start.html" class="imagestier1">Start</A></LI>
<LI><A href="http://www.projectdarkstar.com/participate.html" class="imagestier1">Participate</A></LI>
<LI><A href="http://www.projectdarkstar.com/login.html" class="imagestier1">Login</A></LI>
</UL></DIV></DIV>
<DIV id="menu_item_111" class="menu_item" style="width: 10.78%; left: 5.88%;"><A href="http://www.projectdarkstar.com/current-distribution.html" onmouseout="hide(111);" onmouseover="show(111);" class="images">Downloads</A><DIV class="dropMenu" onmouseout="hide(111);" onmouseover="hold(111);" id="drop_111" style="display: none; "><UL><LI><A href="http://www.projectdarkstar.com/current-distribution.html" class="imagestier1">Current Distribution</A></LI>
<LI><A href="http://www.projectdarkstar.com/weekly-builds.html" class="imagestier1">Weekly Builds</A></LI>
<LI><A href="http://www.projectdarkstar.com/distributions-archive.html" class="imagestier1">Distributions Archive</A></LI>
</UL></DIV></DIV>
<DIV id="menu_item_132" class="menu_item" style="width: 8.82%; left: 16.66%;"><A href="http://www.projectdarkstar.com/wiki/Library?Itemid=132" onmouseout="hide(132);" onmouseover="show(132);" class="images">Library</A><DIV class="dropMenu" onmouseout="hide(132);" onmouseover="hold(132);" id="drop_132" style="display: none; "><UL><LI><A href="http://www.projectdarkstar.com/wiki/Library?Itemid=131" class="imagestier1">Library</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Tutorials?Itemid=226" class="imagestier1">Tutorials</A></LI>
</UL></DIV></DIV>
<DIV id="menu_item_114" class="menu_item" style="width: 16.67%; left: 25.48%;"><A href="http://www.projectdarkstar.com/core-technology.html" onmouseout="hide(114);" onmouseover="show(114);" class="images">Core Technology</A><DIV class="dropMenu" onmouseout="hide(114);" onmouseover="hold(114);" id="drop_114" style="display: none; "><UL><LI><A href="http://www.projectdarkstar.com/technology-roadmap-may-09.html" class="imagestier1">Technology Roadmap</A></LI>
<LI><A href="http://www.projectdarkstar.com/bugs-and-enhancements.html" class="imagestier1">Bugs and Enhancements</A></LI>
<LI><A href="http://www.projectdarkstar.com/source-code-repository.html" class="imagestier1">Source Code Repository</A></LI>
<LI><A href="http://www.projectdarkstar.com/contributing-code.html" class="imagestier1">Contributing Code</A></LI>
</UL></DIV></DIV>
<DIV id="menu_item_115" class="menu_item" style="width: 14.71%; left: 42.15%;"><A href="http://www.projectdarkstar.com/application-showcase.html" onmouseout="hide(115);" onmouseover="show(115);" class="images">Projects/Apps</A><DIV class="dropMenu" onmouseout="hide(115);" onmouseover="hold(115);" id="drop_115" style="display: none; "><UL><LI><A href="http://www.projectdarkstar.com/application-showcase.html" class="imagestier1">Showcase</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Application_List?Itemid=134" class="imagestier1">Applications</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Projects?Itemid=135" class="imagestier1">Projects</A></LI>
<LI><A href="http://www.projectdarkstar.com/developer-challenge-contest.html" class="imagestier1">Developer Challenge Contest</A></LI>
</UL></DIV></DIV>
<DIV id="menu_item_116" class="menu_item" style="width: 11.76%; left: 56.86%;"><A href="http://www.projectdarkstar.com/discussion-overview.html" onmouseout="hide(116);" onmouseover="show(116);" class="images" id="current">Discussion</A><DIV class="dropMenu" onmouseout="hide(116);" onmouseover="hold(116);" id="drop_116" style="display: none; "><UL><LI><A href="http://www.projectdarkstar.com/forum/" class="imagestier1">Forums</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Blog_Roll?Itemid=148" class="imagestier1">Blog Roll</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Community_To_Do_List?Itemid=149" class="imagestier1">Community To-Do List</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/People_Pages?Itemid=153" class="imagestier1">People Pages</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Main_Page?Itemid=154" class="imagestier1">Wiki</A></LI>
</UL></DIV></DIV>
<DIV id="menu_item_151" class="menu_item" style="width: 18.63%; left: 68.62%;"><A href="http://www.projectdarkstar.com/wiki/Products_and_Services?Itemid=151" onmouseout="hide(151);" onmouseover="show(151);" class="images">Products/Services</A><DIV class="dropMenu" onmouseout="hide(151);" onmouseover="hold(151);" id="drop_151" style="display: none; "><UL><LI><A href="http://www.projectdarkstar.com/wiki/Products_and_Services?Itemid=198" class="imagestier1">Products and Services</A></LI>
</UL></DIV></DIV>
<DIV id="menu_item_181" class="menu_item" style="width: 12.75%; left: 87.25%;"><A href="http://www.projectdarkstar.com/wiki/Industry_buzz?Itemid=181" onmouseout="hide(181);" onmouseover="show(181);" class="images" style="background-color: transparent; ">News/Events</A><DIV class="dropMenu" onmouseout="hide(181);" onmouseover="hold(181);" id="drop_181" style="right: 0px; display: none; "><UL><LI><A href="http://www.projectdarkstar.com/wiki/Industry_buzz?Itemid=186" class="imagestier1">Industry Buzz</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Community_News?Itemid=187" class="imagestier1">Community News</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Events_Calendar?Itemid=188" class="imagestier1">Events Calendar</A></LI>
<LI><A href="http://www.projectdarkstar.com/wiki/Press_Releases?Itemid=189" class="imagestier1">Press Releases</A></LI>
</UL></DIV></DIV>
</DIV>
</DIV>
						<DIV class="clear"></DIV>
					</DIV>
					<DIV class="clear"></DIV>
				</DIV>
                 <DIV class="content">
				 	<DIV class="left">
					
		<H1 class="largetext">Project Darkstar Community Forums</H1>
		<H2 class="normaltext">Project Darkstar Server Technology =&gt; Core Darkstar Technology =&gt; Topic started by: nazica on 2009-10-28, 14:03:50</H2>

		<TABLE width="90%" cellpadding="0" cellspacing="0" border="0">
			<TBODY><TR>
				<TD>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>nazica</B> on <B>2009-10-28, 14:03:50</B>
					<HR>
					<DIV style="margin: 0 5ex;">Hi all,<BR><BR>Currently we are working on MMORPG game which uses PDS server as a base for dynamic asynchronous messages exchange.&nbsp; And to be honest everything was perfect until we started some performance tests. <BR><BR>Our current movement positioning is based on grid cells. So, our world is separated on a set of fixed cells in a grid. Each grid cell is a channel. User may be connected up to 4 grid cells at the same time. When user moves other users in the same grid cells receive "user moves" notifications. When user moves to another grid cell, users from the grid cell (from he leaves) get "user left" notification.&nbsp; When user enters to a new grid cell other users get "user enters" notification and entering user receives "grid cell users list" notification.<BR><BR>(http://thinktopsoft.com/tmp/dr.png)<BR><BR>Yes, probably from the algorithmic point of view we don't have the most optimal implementation. For example, <I>SpaceTree</I> looks more pretty. But as we found from our performance tests <I>SpaceTree</I> has more contention problems. And another problem in <I>SpaceTree</I> is a big number of iterations over spaces. For ex. just adding one user (space) to the world works &gt; 100 ms if we already have 80+ connected users and these users are not moving (just to exclude movement contentions). <BR><BR>So, for described structure we have the following code.<BR>We have the next entities:<BR><BR><I>GameWorld</I> is an application listener (main root element).<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public class GameWorld implements AppListener, ManagedObject, Serializable {<BR><BR>&nbsp; &nbsp; private static final long serialVersionUID = -7470707461483725121L;<BR>&nbsp; &nbsp; private Map&lt;String, ManagedReference&lt;WalkArea&gt;&gt; zones;<BR>&nbsp; &nbsp; private ManagedReference&lt;GameWorld&gt; gameWorldRef;<BR>&nbsp; &nbsp; private ManagedReference&lt;ScalableHashMap&lt;String, ManagedReference&lt;Player&gt;&gt;&gt; players;<BR>&nbsp; &nbsp; private Dimension viewport;<BR>...<BR></DIV><BR><I>Zone</I> is a part of game world. It can contain number of grid cells. <BR><DIV class="codeheader">Code:</DIV><DIV class="code">public class Zone implements ManagedObject, Serializable {<BR><BR>&nbsp; &nbsp; private static final long serialVersionUID = 7319403176790347280L;<BR>&nbsp; &nbsp; private String name;<BR>&nbsp; &nbsp; private int cellsInRow;<BR>&nbsp; &nbsp; private int cellsInColumn;<BR>&nbsp; &nbsp; private int cellWidth;<BR>&nbsp; &nbsp; private int cellHeight;<BR>&nbsp; &nbsp; private ManagedReference&lt;GameWorld&gt; gameWorld;<BR>&nbsp; &nbsp; private Map&lt;String, ManagedReference&lt;GridCell&gt;&gt; gridCells = new HashMap&lt;String, ManagedReference&lt;GridCell&gt;&gt;();<BR>...<BR></DIV><BR><I>Zone</I> is initialized from <I>GameWorld#init</I> method when application starts:<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">&nbsp; &nbsp; public void initialize(Properties props) {<BR>...<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gameWorldRef = PDSUtils.createReference(this);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WalkArea theGrid = new Zone(zoneName, zoneDescription, gameWorldRef, gridSizeX, gridSizeY, viewportWidth, viewportHeight);<BR>&nbsp; &nbsp; &nbsp; &nbsp; AppContext.getDataManager().setBinding(Constants.GAME_WORLD, this);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; zones.put(zoneName, AppContext.getDataManager().createReference(theGrid));<BR>...<BR>&nbsp; &nbsp; }<BR></DIV><BR><I>GridCell</I> class "wraps" <I>Channel</I> and contains users.<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public class GridCell implements ChannelListener, ManagedObject, Serializable {<BR><BR>&nbsp; &nbsp; private static final long serialVersionUID = 3083731056346503793L;<BR>&nbsp; &nbsp; private static final Logger logger = Logger.getLogger(GridCell.class.getName());<BR>&nbsp; &nbsp; private String cellName;<BR>&nbsp; &nbsp; private ManagedReference&lt;WalkArea&gt; worldGrid;<BR>&nbsp; &nbsp; private ManagedReference&lt;ScalableHashMap&lt;String, ManagedReference&lt;Player&gt;&gt;&gt; players;<BR>...<BR></DIV><BR><I>Player</I> class is client representation on the server.<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public class Player implements ManagedObject, ClientSessionListener, Serializable {<BR><BR>&nbsp; &nbsp; private static final long serialVersionUID = 8542543619198203703L;<BR>&nbsp; &nbsp; private static final Logger logger = Logger.getLogger(Player.class.getName());<BR>&nbsp; &nbsp; private ManagedReference&lt;ClientSession&gt; clientSession;<BR>&nbsp; &nbsp; private String clientId;<BR>&nbsp; &nbsp; private ManagedReference&lt;PlayerState&gt; playerStateRef;<BR>&nbsp; &nbsp; private Collection&lt;ManagedReference&lt;GridCell&gt;&gt; viewport = new ArrayList&lt;ManagedReference&lt;GridCell&gt;&gt;(5);<BR>&nbsp; &nbsp; private ManagedReference&lt;GameWorld&gt; gameWord;<BR>&nbsp; &nbsp; private ManagedReference&lt;WalkArea&gt; worldGrid;<BR>&nbsp; &nbsp; private ManagedReference&lt;Player&gt; thisReference;<BR>...<BR></DIV><BR><I>PlayerState</I> is class that contains some player changeable information. This data moved from <I>Player</I> to reduce number of contentions.<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public class PlayerState implements ManagedObject, Serializable {<BR>&nbsp; &nbsp; public Position startPosition;<BR>&nbsp; &nbsp; public Position destinationPosition;<BR>&nbsp; &nbsp; public long arrivalTime;<BR></DIV><BR>Now, some part of our logic:<BR><BR>When user login:<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public ClientSessionListener loggedIn(ClientSession session) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; logger.info(format(MSG_INFO_PLAYER_CONNECTED, session.getName()));<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; ManagedReference&lt;ClientSession&gt; clientSessionRef = PDSUtils.createReference(session);<BR>&nbsp; &nbsp; &nbsp; &nbsp; Player player = new Player(clientSessionRef, session.getName(), gameWorldRef);<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; players.getForUpdate().put(player.getPlayerId(), PDSUtils.createReference(player));<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; return player;<BR>}<BR></DIV><BR>when user is connected to a zone:<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public Set&lt;ManagedReference&lt;GridCell&gt;&gt; enterPlayer(ManagedReference&lt;Player&gt; player) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; Set&lt;ManagedReference&lt;GridCell&gt;&gt; result = new HashSet&lt;ManagedReference&lt;GridCell&gt;&gt;(10);<BR>&nbsp; &nbsp; &nbsp; &nbsp; List&lt;String&gt; names = channelFinder.get().findDestChannels(player.get().getPlayerStateRef().get().getDestinationPosition());<BR>&nbsp; &nbsp; &nbsp; &nbsp; for (String name : names) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (gridCells.get(name) == null) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.warn(MessageFormat.format("Unrealible channel name: {0}", name));<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gridCells.get(name).get().addPlayer(player);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result.add(gridCells.get(name));<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; &nbsp; &nbsp; return result;<BR>&nbsp; &nbsp; }</DIV><BR>and in <I>GridCell</I><BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public void addPlayer(ManagedReference&lt;Player&gt; player) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; Player playerInstance = player.get();<BR>&nbsp; &nbsp; &nbsp; &nbsp; String id = playerInstance.getPlayerId();<BR>&nbsp; &nbsp; &nbsp; &nbsp; if (players.get().containsKey(id)) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.warn("ClientUnit already exists in the cell");<BR>&nbsp; &nbsp; &nbsp; &nbsp; } else {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; players.get().put(id, player);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AppContext.getChannelManager().getChannel(cellName).join(playerInstance.getClientSession().get());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; logger.debug(MessageFormat.format("new player just enter: {0}", id));<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServerUserEnterChannelPacket packet = new ServerUserEnterChannelPacket(cellName, id);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PlayerState playerState = playerInstance.getPlayerStateRef().get();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setPosX(playerState.getDestinationPosition().getX());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setPosY(playerState.getDestinationPosition().getY());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setCurPosX(playerState.getDestinationPosition().getX());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setCurPosY(playerState.getDestinationPosition().getY());<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setAvatar(playerState.getAvatar());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AppContext.getTaskManager().scheduleTask(new SendChannelMessageTask(playerInstance.getClientSession(), packet));<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; }<BR><BR>public void joinPlayer(ManagedReference&lt;Player&gt; player, Position oldPosition) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; Player playerInstance = player.get();<BR>&nbsp; &nbsp; &nbsp; &nbsp; String id = playerInstance.getPlayerId();<BR>&nbsp; &nbsp; &nbsp; &nbsp; if (!players.get().containsKey(id)) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; players.get().put(id, player);<BR>AppContext.getChannelManager().getChannel(cellName).join(playerInstance.getClientSession().get());<BR>&nbsp;<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; }</DIV><BR>When user sends "move packet", we start this task (from <I>Player</I>):<BR><DIV class="codeheader">Code:</DIV><DIV class="code">AppContext.getTaskManager().scheduleTask(new MoveTask(worldGrid, thisReference, currentPos, destinationPos, cmtPacket));</DIV><BR><I>MoveTask</I> was made to separate logic in transactions:<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">worldGrid.get().movePlayer(playerRef, currentPos, destinationPos, cmtPacket.getTimeOfArrival());</DIV><BR>then:<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">public void movePlayer(ManagedReference&lt;Player&gt; player, Position currentPosition, Position destinationPosition, long timeOfArrival) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; Player playerInst = player.get();<BR>&nbsp; &nbsp; &nbsp; &nbsp; PlayerState playerState = playerInst.getPlayerStateRef().getForUpdate();<BR>&nbsp; &nbsp; &nbsp; &nbsp; if (playerState.getDestinationPosition().equals(destinationPosition) &amp;&amp; playerState.getArrivalTime() == timeOfArrival) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // duplicate move command -&gt; ignore it<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return;<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; playerState.setStartPosition(currentPosition);<BR>&nbsp; &nbsp; &nbsp; &nbsp; playerState.setDestinationPosition(destinationPosition);<BR>&nbsp; &nbsp; &nbsp; &nbsp; playerState.setArrivalTime(timeOfArrival);<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; sendLeaveChannelPackets(player, destinationPosition);<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; List&lt;String&gt; channelsToJoin = channelFinder.get().findDestChannels(destinationPosition);<BR>&nbsp; &nbsp; &nbsp; &nbsp; sendEnterChannelPackets(playerInst, currentPosition, channelsToJoin);<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; Collection&lt;ManagedReference&lt;GridCell&gt;&gt; newViewport = new ArrayList&lt;ManagedReference&lt;GridCell&gt;&gt;(4);<BR>&nbsp; &nbsp; &nbsp; &nbsp; for (String channelName : channelsToJoin) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newViewport.add(gridCells.get(channelName));<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; &nbsp; &nbsp; playerInst.setViewport(newViewport);<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; // join to channels<BR>&nbsp; &nbsp; &nbsp; &nbsp; for (String channelName : channelsToJoin) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gridCells.get(channelName).get().joinPlayer(player, currentPosition);<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR><BR>for (String channelName : channelsToJoin) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // new update - send channel message<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServerUserMovePacket packet = new ServerUserMovePacket(playerInst.getPlayerId(), channelName);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setCurPosX(playerState.getStartPosition().getX());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setCurPosY(playerState.getStartPosition().getY());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setPosX(playerState.getDestinationPosition().getX());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setPosY(playerState.getDestinationPosition().getY());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; packet.setTimeOfArrival(playerState.getArrivalTime());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AppContext.getTaskManager().scheduleTask(new SendChannelMessageTask(playerInst.getClientSession(), packet));<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; &nbsp; &nbsp; <BR>&nbsp; &nbsp; &nbsp; &nbsp; playerInst.sendChannelUsersListPacket();<BR>&nbsp; &nbsp; }<BR><BR>private void sendLeaveChannelPackets(ManagedReference&lt;Player&gt; player, Position destinationPosition) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; Collection&lt;String&gt; joinedChannelNames = GridCell.getGridCellNames(player.get().getViewport());<BR>&nbsp; &nbsp; &nbsp; &nbsp; List&lt;String&gt; channelsToLeave = channelFinder.get().findChannelsToLeave(joinedChannelNames, destinationPosition);<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; for (String channelName : channelsToLeave) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; gridCells.get(channelName).get().removePlayer(player);<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; }<BR><BR><BR>&nbsp; private static void sendEnterChannelPackets(Player playerInst, Position currentPosition, Iterable&lt;String&gt; channelsToJoin) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; Collection&lt;String&gt; channelsToEnter = new ArrayList&lt;String&gt;(5);<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; for (String cell : channelsToJoin) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Collection&lt;String&gt; viewportCellNames = GridCell.getGridCellNames(playerInst.getViewport());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!viewportCellNames.contains(cell)) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; channelsToEnter.add(cell);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; &nbsp; &nbsp; }</DIV></DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>nazica</B> on <B>2009-10-28, 14:07:39</B>
					<HR>
					<DIV style="margin: 0 5ex;"><B>Test workflow</B>:<BR>PDS configured to use Java implemetation of Berkley DB.<BR>Number of task threads: 4<BR>Number of transaction threads: 4<BR>Server hardware: PC, Core2Duo&nbsp; - 2.8 GHz, RAM 4GB, WinXP.<BR><BR>To analyze performance we are using:<BR><UL style="margin-top: 0; margin-bottom: 0;"><LI>Gamalocus Raw Dump Listener;</LI><LI>Profile Summary Listener;</LI><LI>Snapshot Profile Listener;</LI><LI>Aggregate Profile Listener. </LI></UL><BR>We running <B>40</B> clients which are login, join to the same zone and sending random move packets each 100 milliseconds. <I>Zone</I> contains 9 <I>GridCells</I>. Test duration 5 minutes. Clients and server were running on separate machines. <BR><BR><B>Test results</B>: <BR><BR>Test results from Gamalocus Raw Dump profiler:<BR>(http://thinktopsoft.com/tmp/timeline.PNG)<BR>(http://thinktopsoft.com/tmp/contention.PNG)<BR>(http://thinktopsoft.com/tmp/totaltasks.PNG)<BR>(http://thinktopsoft.com/tmp/exceptions.PNG)<BR><BR>Most exceptions that cause task fail is look like:<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">com.sun.sgs.app.TransactionConflictException Transaction conflict: (JE 3.3.75) Lock expired. Locker 8939961 234_pool-1-thread-4_Txn: waited for lock on database=oids LockAddr:6624917 node=302 type=READ grant=WAIT_NEW timeoutMillis=10 startTime=1256724142437 endTime=1256724142468<BR>Owners: [&lt;LockInfo locker="18693297 231_pool-1-thread-1_Txn" type="WRITE"/&gt;]<BR>Waiters: [&lt;LockInfo locker="15799662 236_pool-1-thread-3_Txn" type="READ"/&gt;]<BR>Transaction 18693297 231_pool-1-thread-1_Txn waits for&nbsp; LockAddr:30119347 Owners:&lt;LockInfo locker="8939961 234_pool-1-thread-4_Txn" type="WRITE"/&gt; Waiters:[&lt;LockInfo locker="18693297 231_pool-1-thread-1_Txn" type="READ"/&gt;]<BR>Transaction 8939961 234_pool-1-thread-4_Txn owns LockAddr:30119347 &lt;LockInfo locker="8939961 234_pool-1-thread-4_Txn" type="WRITE"/&gt;<BR>Transaction 8939961 234_pool-1-thread-4_Txn waits for LockAddr:6624917<BR><BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.db.je.JeEnvironment.convertException(JeEnvironment.java:447)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.db.je.JeDatabase.get(JeDatabase.java:112)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.DataStoreImpl.getObjectInternal(DataStoreImpl.java:922)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.AbstractDataStore.getObject(AbstractDataStore.java:238)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.DataStoreProfileProducer.getObject(DataStoreProfileProducer.java:136)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.ManagedReferenceImpl.get(ManagedReferenceImpl.java:353)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.Context.getBinding(Context.java:147)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.DataServiceImpl.getBindingInternal(DataServiceImpl.java:727)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.DataServiceImpl.getServiceBinding(DataServiceImpl.java:631)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.util.BindingKeyedMapImpl.getValue(BindingKeyedMapImpl.java:809)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.util.BindingKeyedMapImpl.get(BindingKeyedMapImpl.java:117)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.channel.ChannelImpl.getInstance(ChannelImpl.java:284)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.channel.ChannelServiceImpl.getChannel(ChannelServiceImpl.java:396)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.app.profile.ProfileChannelManager.getChannel(ProfileChannelManager.java:59)<BR><SPAN style="white-space: pre;">	</SPAN>at com.virtualfairground.ride.walkandtalk.entity.GridCell.addPlayer(GridCell.java:94)<BR><SPAN style="white-space: pre;">	</SPAN>at com.virtualfairground.ride.walkandtalk.entity.WalkArea.enterPlayer(WalkArea.java:95)<BR><SPAN style="white-space: pre;">	</SPAN>at com.virtualfairground.ride.walkandtalk.entity.Player.receivedMessage(Player.java:122)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.session.ClientSessionHandler$2.run(ClientSessionHandler.java:185)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.kernel.TransactionSchedulerImpl.executeTask(TransactionSchedulerImpl.java:643)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.kernel.TransactionSchedulerImpl.access$500(TransactionSchedulerImpl.java:104)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.kernel.TransactionSchedulerImpl$TaskConsumer.run(TransactionSchedulerImpl.java:547)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.FutureTask.run(FutureTask.java:138)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)<BR><SPAN style="white-space: pre;">	</SPAN>at java.lang.Thread.run(Thread.java:619) </DIV>and<BR><DIV class="codeheader">Code:</DIV><DIV class="code">com.sun.sgs.app.TransactionConflictException Transaction conflict: (JE 3.3.75) Lock expired. Locker 30279188 267_pool-1-thread-4_Txn: waited for lock on database=oids LockAddr:30636774 node=315 type=READ grant=WAIT_NEW timeoutMillis=10 startTime=1256724142687 endTime=1256724142703<BR>Owners: [&lt;LockInfo locker="14906747 268_pool-1-thread-1_Txn" type="WRITE"/&gt;]<BR>Waiters: []<BR><BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.db.je.JeEnvironment.convertException(JeEnvironment.java:447)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.db.je.JeDatabase.get(JeDatabase.java:112)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.DataStoreImpl.getObjectInternal(DataStoreImpl.java:922)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.AbstractDataStore.getObject(AbstractDataStore.java:238)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.store.DataStoreProfileProducer.getObject(DataStoreProfileProducer.java:136)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.ManagedReferenceImpl.get(ManagedReferenceImpl.java:353)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.data.ManagedReferenceImpl.get(ManagedReferenceImpl.java:336)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.app.util.ScalableHashMap.size(ScalableHashMap.java:1366)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.app.util.ScalableHashMap$Values.size(ScalableHashMap.java:2679)<BR><SPAN style="white-space: pre;">	</SPAN>at com.virtualfairground.ride.walkandtalk.entity.Player.sendChannelUsersListPacket(Player.java:181)<BR><SPAN style="white-space: pre;">	</SPAN>at com.virtualfairground.ride.walkandtalk.entity.Player.receivedMessage(Player.java:123)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.service.session.ClientSessionHandler$2.run(ClientSessionHandler.java:185)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.kernel.TransactionSchedulerImpl.executeTask(TransactionSchedulerImpl.java:643)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.kernel.TransactionSchedulerImpl.access$500(TransactionSchedulerImpl.java:104)<BR><SPAN style="white-space: pre;">	</SPAN>at com.sun.sgs.impl.kernel.TransactionSchedulerImpl$TaskConsumer.run(TransactionSchedulerImpl.java:547)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.FutureTask.run(FutureTask.java:138)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<BR><SPAN style="white-space: pre;">	</SPAN>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)<BR><SPAN style="white-space: pre;">	</SPAN>at java.lang.Thread.run(Thread.java:619</DIV><BR>Another sort of statistics:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">past 5000 tasks:<BR>&nbsp; mean runtime: 0,55ms,&nbsp; max:&nbsp; &nbsp; 110ms,&nbsp; failed: 251 (5,02%)<BR>&nbsp; mean ready count: 23492,57,&nbsp; mean lag time: 2622,11ms<BR>&nbsp; mean tasks running concurrently: 0,93<BR>&nbsp; mean throughput: 1688,23 txn/sec,&nbsp; mean latency: 2622,66 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 3,06ms,&nbsp; failed: 50,60%<BR>&nbsp; mean ready count: 22660,71,&nbsp; mean lag time: 2876,99ms<BR>&nbsp; mean throughput: 405,84 txn/sec,&nbsp; mean latency: 2880,05 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,10ms,&nbsp; max:&nbsp; &nbsp; &nbsp;63ms,&nbsp; failed: 0 (0,00%)<BR>&nbsp; mean ready count: 20391,65,&nbsp; mean lag time: 491,35ms<BR>&nbsp; mean tasks running concurrently: 1,27<BR>&nbsp; mean throughput: 12315,27 txn/sec,&nbsp; mean latency: 491,46 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 2,33ms,&nbsp; failed: 38,54%<BR>&nbsp; mean ready count: 22499,12,&nbsp; mean lag time: 2241,83ms<BR>&nbsp; mean throughput: 2851,48 txn/sec,&nbsp; mean latency: 2244,15 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,08ms,&nbsp; max:&nbsp; &nbsp; &nbsp;62ms,&nbsp; failed: 0 (0,00%)<BR>&nbsp; mean ready count: 18349,75,&nbsp; mean lag time: 899,87ms<BR>&nbsp; mean tasks running concurrently: 1,07<BR>&nbsp; mean throughput: 12787,72 txn/sec,&nbsp; mean latency: 899,96 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 1,45ms,&nbsp; failed: 25,53%<BR>&nbsp; mean ready count: 21612,12,&nbsp; mean lag time: 1841,42ms<BR>&nbsp; mean throughput: 5393,79 txn/sec,&nbsp; mean latency: 1842,88 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,12ms,&nbsp; max:&nbsp; &nbsp; &nbsp;93ms,&nbsp; failed: 0 (0,00%)<BR>&nbsp; mean ready count: 16126,58,&nbsp; mean lag time: 1894,61ms<BR>&nbsp; mean tasks running concurrently: 1,70<BR>&nbsp; mean throughput: 13927,58 txn/sec,&nbsp; mean latency: 1894,73 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 0,73ms,&nbsp; failed: 12,37%<BR>&nbsp; mean ready count: 20008,77,&nbsp; mean lag time: 1708,86ms<BR>&nbsp; mean throughput: 8164,63 txn/sec,&nbsp; mean latency: 1709,58 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,06ms,&nbsp; max:&nbsp; &nbsp; &nbsp;47ms,&nbsp; failed: 1 (0,02%)<BR>&nbsp; mean ready count: 13493,67,&nbsp; mean lag time: 723,43ms<BR>&nbsp; mean tasks running concurrently: 1,28<BR>&nbsp; mean throughput: 22826,48 txn/sec,&nbsp; mean latency: 723,49 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 0,18ms,&nbsp; failed: 1,01%<BR>&nbsp; mean ready count: 18370,84,&nbsp; mean lag time: 1326,27ms<BR>&nbsp; mean throughput: 12709,06 txn/sec,&nbsp; mean latency: 1326,46 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,10ms,&nbsp; max:&nbsp; &nbsp; &nbsp;94ms,&nbsp; failed: 0 (0,00%)<BR>&nbsp; mean ready count: 11868,91,&nbsp; mean lag time: 1133,90ms<BR>&nbsp; mean tasks running concurrently: 2,21<BR>&nbsp; mean throughput: 22831,05 txn/sec,&nbsp; mean latency: 1134,00 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 0,09ms,&nbsp; failed: 0,00%<BR>&nbsp; mean ready count: 16046,11,&nbsp; mean lag time: 1028,63ms<BR>&nbsp; mean throughput: 16937,62 txn/sec,&nbsp; mean latency: 1028,73 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,08ms,&nbsp; max:&nbsp; &nbsp; &nbsp;93ms,&nbsp; failed: 0 (0,00%)<BR>&nbsp; mean ready count: 8768,21,&nbsp; mean lag time: 1036,34ms<BR>&nbsp; mean tasks running concurrently: 1,86<BR>&nbsp; mean throughput: 22935,78 txn/sec,&nbsp; mean latency: 1036,42 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 0,09ms,&nbsp; failed: 0,00%<BR>&nbsp; mean ready count: 13721,42,&nbsp; mean lag time: 1137,63ms<BR>&nbsp; mean throughput: 19061,72 txn/sec,&nbsp; mean latency: 1137,72 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,08ms,&nbsp; max:&nbsp; &nbsp; &nbsp;79ms,&nbsp; failed: 2 (0,04%)<BR>&nbsp; mean ready count: 7126,33,&nbsp; mean lag time: 1094,26ms<BR>&nbsp; mean tasks running concurrently: 1,71<BR>&nbsp; mean throughput: 22821,92 txn/sec,&nbsp; mean latency: 1094,34 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 0,09ms,&nbsp; failed: 0,01%<BR>&nbsp; mean ready count: 11476,74,&nbsp; mean lag time: 1176,51ms<BR>&nbsp; mean throughput: 21068,56 txn/sec,&nbsp; mean latency: 1176,60 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,07ms,&nbsp; max:&nbsp; &nbsp; &nbsp;47ms,&nbsp; failed: 0 (0,00%)<BR>&nbsp; mean ready count: 4943,06,&nbsp; mean lag time: 501,79ms<BR>&nbsp; mean tasks running concurrently: 1,75<BR>&nbsp; mean throughput: 26595,74 txn/sec,&nbsp; mean latency: 501,85 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 0,07ms,&nbsp; failed: 0,01%<BR>&nbsp; mean ready count: 9240,03,&nbsp; mean lag time: 897,95ms<BR>&nbsp; mean throughput: 23602,20 txn/sec,&nbsp; mean latency: 898,02 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,08ms,&nbsp; max:&nbsp; &nbsp; &nbsp;63ms,&nbsp; failed: 0 (0,00%)<BR>&nbsp; mean ready count: 2477,06,&nbsp; mean lag time: 526,07ms<BR>&nbsp; mean tasks running concurrently: 1,92<BR>&nbsp; mean throughput: 24630,54 txn/sec,&nbsp; mean latency: 526,15 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 0,08ms,&nbsp; failed: 0,01%<BR>&nbsp; mean ready count: 7036,71,&nbsp; mean lag time: 858,47ms<BR>&nbsp; mean throughput: 23963,01 txn/sec,&nbsp; mean latency: 858,55 ms/txn</DIV><BR>and<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=222/233<BR>&nbsp; AverageQueueSize=0,93 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1674/2529<BR>&nbsp; AverageQueueSize=379,70 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1866/3139<BR>&nbsp; AverageQueueSize=1395,82 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1860/3245<BR>&nbsp; AverageQueueSize=2507,09 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1370/2840<BR>&nbsp; AverageQueueSize=4729,82 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1511/2948<BR>&nbsp; AverageQueueSize=6951,46 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=895/2284<BR>&nbsp; AverageQueueSize=8094,05 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=821/2161<BR>&nbsp; AverageQueueSize=9292,12 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1109/2514<BR>&nbsp; AverageQueueSize=11088,81 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=633/2002<BR>&nbsp; AverageQueueSize=12116,65 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1093/2410<BR>&nbsp; AverageQueueSize=12378,52 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1086/2453<BR>&nbsp; AverageQueueSize=13261,90 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=586/1820<BR>&nbsp; AverageQueueSize=13851,11 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1030/2196<BR>&nbsp; AverageQueueSize=14481,67 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=498/1828<BR>&nbsp; AverageQueueSize=16399,17 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=905/2209<BR>&nbsp; AverageQueueSize=16446,19 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=942/2311<BR>&nbsp; AverageQueueSize=17348,30 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=511/1826<BR>&nbsp; AverageQueueSize=18048,53 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=921/2255<BR>&nbsp; AverageQueueSize=18290,95 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=949/2236<BR>&nbsp; AverageQueueSize=18779,12 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=483/1694<BR>&nbsp; AverageQueueSize=19442,57 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=924/2209<BR>&nbsp; AverageQueueSize=20016,54 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=879/2112<BR>&nbsp; AverageQueueSize=20403,62 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=463/1898<BR>&nbsp; AverageQueueSize=22106,91 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=966/2231<BR>&nbsp; AverageQueueSize=21332,52 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=968/2405<BR>&nbsp; AverageQueueSize=22342,36 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=668/2056<BR>&nbsp; AverageQueueSize=23341,46 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=685/2107<BR>&nbsp; AverageQueueSize=23964,18 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=843/2204<BR>&nbsp; AverageQueueSize=23995,45 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=423/1915<BR>&nbsp; AverageQueueSize=25687,05 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=937/2243<BR>&nbsp; AverageQueueSize=24727,09 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=54211/55009<BR>&nbsp; AverageQueueSize=11953,13 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=74/74<BR>&nbsp; AverageQueueSize=0,00 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=152/154<BR>&nbsp; AverageQueueSize=2,97 tasks</DIV><BR><B>What we were trying to optimize</B>:<BR><UL style="margin-top: 0; margin-bottom: 0;"><LI>separate one main movement task to the set of small tasks;</LI><LI>move part of logic to the Service/Manager pair.</LI></UL><BR>But these actions did not give us an appreciable performance results.<BR><BR><B>The question:</B><BR>What we can do to decrease number of contentions? Because big number of failed tasks produce big lag in response time. And also this decreases a number of possible concurrent connected users.<BR><BR><BR><B>And another question</B>. Maybe someone already solved similar problem (players movement in MMORPG)? What was your way and did you made also some performance tests? And what was the result? Are Project Wonderland performance test results avaliable?<BR><BR>Cool post, yeah? </DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>kbt</B> on <B>2009-10-28, 15:45:29</B>
					<HR>
					<DIV style="margin: 0 5ex;">Some initial comments...<BR><BR>In looking at the queue size, it is not clear to me that your problem is purely contention. If you look at the number of tasks attempted to be executed, vs the number that were successful, the difference does not come close to accounting for the size that the queue grows at each report. Something is creating a lot of tasks, more that can be processed. I'm not sure I followed exactly how many messages and tasks are created for each move. In your note you said that each player is sending move packets every 100 ms? Is that rate necessary for game play? What happens if you reduce the rate?<BR><BR>When there is contention, the Java edition of Berkley sometimes does not perform was well as the native version. Have you tried testing with the native version?<BR><BR>Also, have you tried increasing the number of transaction threads?<BR><BR>Just a comment, I don't think this contributes much to the performance issues, but I think it would be better to pass the object around instead of its reference. For example, in several methods the player's reference is passed in, and is immediately de-referenced using ManagedReference.get(). This method is not entirely free.<BR><BR>In the just curious category, why is the player state separate from the player object? Can it be accessed and modified independently?</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>nazica</B> on <B>2009-10-28, 16:48:25</B>
					<HR>
					<DIV style="margin: 0 5ex;">Hello, Keith!<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">that each player is sending move packets every 100 ms?</DIV>Indeed.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">Is that rate necessary for game play?</DIV>No. We try to emulate a lot of users. In real app it can be 1 move packet per 1..10 seconds from a player. So, if our app can emulate 100 these crazy virtual users, we suppose that the app can handle about 1000+ real users.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">What happens if you reduce the rate?</DIV>Lags will be smaller, percentage of failed tasks will reduce, tasks queue will not raise in size or raise slowly.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">Have you tried testing with the native version?</DIV>Yes. Persentage of failed tasks is greater. Here is some data:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">past 5000 tasks:<BR>&nbsp; mean runtime: 8,23ms,&nbsp; max:&nbsp; &nbsp;1922ms,&nbsp; failed: 2206 (44,12%)<BR>&nbsp; mean ready count: 361,07,&nbsp; mean lag time: 283,79ms<BR>&nbsp; mean tasks running concurrently: 0,35<BR>&nbsp; mean throughput: 42,85 txn/sec,&nbsp; mean latency: 292,02 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 8,23ms,&nbsp; failed: 44,12%<BR>&nbsp; mean ready count: 361,07,&nbsp; mean lag time: 283,79ms<BR>&nbsp; mean throughput: 42,85 txn/sec,&nbsp; mean latency: 292,02 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 3,32ms,&nbsp; max:&nbsp; &nbsp; 110ms,&nbsp; failed: 1912 (38,24%)<BR>&nbsp; mean ready count: 2065,59,&nbsp; mean lag time: 590,16ms<BR>&nbsp; mean tasks running concurrently: 1,04<BR>&nbsp; mean throughput: 312,20 txn/sec,&nbsp; mean latency: 593,48 ms/txn<BR>past 10000 tasks:<BR>&nbsp; mean runtime: 5,78ms,&nbsp; failed: 41,18%<BR>&nbsp; mean ready count: 1213,33,&nbsp; mean lag time: 436,97ms<BR>&nbsp; mean throughput: 177,53 txn/sec,&nbsp; mean latency: 442,75 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 4,01ms,&nbsp; max:&nbsp; &nbsp; 188ms,&nbsp; failed: 2003 (40,06%)<BR>&nbsp; mean ready count: 4167,81,&nbsp; mean lag time: 707,67ms<BR>&nbsp; mean tasks running concurrently: 1,10<BR>&nbsp; mean throughput: 274,80 txn/sec,&nbsp; mean latency: 711,68 ms/txn<BR>past 15000 tasks:<BR>&nbsp; mean runtime: 5,19ms,&nbsp; failed: 40,81%<BR>&nbsp; mean ready count: 2198,16,&nbsp; mean lag time: 527,21ms<BR>&nbsp; mean throughput: 209,95 txn/sec,&nbsp; mean latency: 532,39 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 3,86ms,&nbsp; max:&nbsp; &nbsp; 141ms,&nbsp; failed: 1984 (39,68%)<BR>&nbsp; mean ready count: 6176,88,&nbsp; mean lag time: 785,21ms<BR>&nbsp; mean tasks running concurrently: 1,05<BR>&nbsp; mean throughput: 273,04 txn/sec,&nbsp; mean latency: 789,07 ms/txn<BR>past 20000 tasks:<BR>&nbsp; mean runtime: 4,85ms,&nbsp; failed: 40,53%<BR>&nbsp; mean ready count: 3192,84,&nbsp; mean lag time: 591,71ms<BR>&nbsp; mean throughput: 225,72 txn/sec,&nbsp; mean latency: 596,56 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 4,74ms,&nbsp; max:&nbsp; &nbsp; 110ms,&nbsp; failed: 2220 (44,40%)<BR>&nbsp; mean ready count: 8420,66,&nbsp; mean lag time: 880,63ms<BR>&nbsp; mean tasks running concurrently: 1,15<BR>&nbsp; mean throughput: 242,05 txn/sec,&nbsp; mean latency: 885,37 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 4,83ms,&nbsp; failed: 41,30%<BR>&nbsp; mean ready count: 4238,40,&nbsp; mean lag time: 649,49ms<BR>&nbsp; mean throughput: 228,99 txn/sec,&nbsp; mean latency: 654,32 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 5,10ms,&nbsp; max:&nbsp; &nbsp; 110ms,&nbsp; failed: 2350 (47,00%)<BR>&nbsp; mean ready count: 9974,17,&nbsp; mean lag time: 939,78ms<BR>&nbsp; mean tasks running concurrently: 1,14<BR>&nbsp; mean throughput: 222,58 txn/sec,&nbsp; mean latency: 944,88 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 4,20ms,&nbsp; failed: 41,88%<BR>&nbsp; mean ready count: 6161,02,&nbsp; mean lag time: 780,69ms<BR>&nbsp; mean throughput: 264,94 txn/sec,&nbsp; mean latency: 784,89 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 4,88ms,&nbsp; max:&nbsp; &nbsp; 140ms,&nbsp; failed: 2262 (45,24%)<BR>&nbsp; mean ready count: 10686,80,&nbsp; mean lag time: 988,81ms<BR>&nbsp; mean tasks running concurrently: 1,09<BR>&nbsp; mean throughput: 224,37 txn/sec,&nbsp; mean latency: 993,69 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 4,52ms,&nbsp; failed: 43,28%<BR>&nbsp; mean ready count: 7885,27,&nbsp; mean lag time: 860,42ms<BR>&nbsp; mean throughput: 247,37 txn/sec,&nbsp; mean latency: 864,94 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 4,77ms,&nbsp; max:&nbsp; &nbsp; 109ms,&nbsp; failed: 2406 (48,12%)<BR>&nbsp; mean ready count: 12252,75,&nbsp; mean lag time: 1049,17ms<BR>&nbsp; mean tasks running concurrently: 1,04<BR>&nbsp; mean throughput: 218,44 txn/sec,&nbsp; mean latency: 1053,94 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 4,67ms,&nbsp; failed: 44,89%<BR>&nbsp; mean ready count: 9502,25,&nbsp; mean lag time: 928,72ms<BR>&nbsp; mean throughput: 236,10 txn/sec,&nbsp; mean latency: 933,39 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 5,54ms,&nbsp; max:&nbsp; &nbsp; &nbsp;94ms,&nbsp; failed: 2431 (48,62%)<BR>&nbsp; mean ready count: 13452,68,&nbsp; mean lag time: 1063,55ms<BR>&nbsp; mean tasks running concurrently: 1,16<BR>&nbsp; mean throughput: 208,64 txn/sec,&nbsp; mean latency: 1069,10 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 5,01ms,&nbsp; failed: 46,68%<BR>&nbsp; mean ready count: 10957,41,&nbsp; mean lag time: 984,39ms<BR>&nbsp; mean throughput: 223,22 txn/sec,&nbsp; mean latency: 989,39 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 5,83ms,&nbsp; max:&nbsp; &nbsp; 125ms,&nbsp; failed: 2305 (46,10%)<BR>&nbsp; mean ready count: 14091,09,&nbsp; mean lag time: 1181,81ms<BR>&nbsp; mean tasks running concurrently: 1,20<BR>&nbsp; mean throughput: 205,10 txn/sec,&nbsp; mean latency: 1187,64 ms/txn<BR>past 25000 tasks:<BR>&nbsp; mean runtime: 5,23ms,&nbsp; failed: 47,02%<BR>&nbsp; mean ready count: 12091,50,&nbsp; mean lag time: 1044,63ms<BR>&nbsp; mean throughput: 215,83 txn/sec,&nbsp; mean latency: 1049,85 ms/txn</DIV><BR>and<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=34/34<BR>&nbsp; AverageQueueSize=0,00 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=35/35<BR>&nbsp; AverageQueueSize=0,00 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=35/35<BR>&nbsp; AverageQueueSize=0,00 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=35/35<BR>&nbsp; AverageQueueSize=0,00 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=69/69<BR>&nbsp; AverageQueueSize=-0,01 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1170/2431<BR>&nbsp; AverageQueueSize=67,07 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2910/4855<BR>&nbsp; AverageQueueSize=1209,42 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2929/4750<BR>&nbsp; AverageQueueSize=3027,74 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2800/4666<BR>&nbsp; AverageQueueSize=4993,36 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2600/4361<BR>&nbsp; AverageQueueSize=6841,32 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2278/4247<BR>&nbsp; AverageQueueSize=8776,36 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2384/4352<BR>&nbsp; AverageQueueSize=10032,72 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2128/4073<BR>&nbsp; AverageQueueSize=10635,29 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2182/4081<BR>&nbsp; AverageQueueSize=11653,63 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2344/4367<BR>&nbsp; AverageQueueSize=12958,38 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=1958/3902<BR>&nbsp; AverageQueueSize=13845,88 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=2037/3715<BR>&nbsp; AverageQueueSize=14096,83 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=4&nbsp; Tasks=871/2412<BR>&nbsp; AverageQueueSize=15326,06 tasks</DIV><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">Also, have you tried increasing the number of transaction threads?</DIV>Yes, without success:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">past 5000 tasks:<BR>&nbsp; mean runtime: 22,90ms,&nbsp; max:&nbsp; &nbsp;1656ms,&nbsp; failed: 4108 (82,16%)<BR>&nbsp; mean ready count: 75,87,&nbsp; mean lag time: 249,77ms<BR>&nbsp; mean tasks running concurrently: 0,59<BR>&nbsp; mean throughput: 25,77 txn/sec,&nbsp; mean latency: 272,67 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 22,90ms,&nbsp; failed: 82,16%<BR>&nbsp; mean ready count: 75,87,&nbsp; mean lag time: 249,77ms<BR>&nbsp; mean throughput: 25,77 txn/sec,&nbsp; mean latency: 272,67 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,89ms,&nbsp; max:&nbsp; &nbsp; 109ms,&nbsp; failed: 3140 (62,80%)<BR>&nbsp; mean ready count: 826,67,&nbsp; mean lag time: 620,23ms<BR>&nbsp; mean tasks running concurrently: 0,14<BR>&nbsp; mean throughput: 157,67 txn/sec,&nbsp; mean latency: 621,11 ms/txn<BR>past 10000 tasks:<BR>&nbsp; mean runtime: 11,89ms,&nbsp; failed: 72,48%<BR>&nbsp; mean ready count: 451,27,&nbsp; mean lag time: 435,00ms<BR>&nbsp; mean throughput: 91,72 txn/sec,&nbsp; mean latency: 446,89 ms/txn<BR>past 5000 tasks:<BR>&nbsp; mean runtime: 0,48ms,&nbsp; max:&nbsp; &nbsp; &nbsp;47ms,&nbsp; failed: 2924 (58,48%)<BR>&nbsp; mean ready count: 3175,14,&nbsp; mean lag time: 2,34ms<BR>&nbsp; mean tasks running concurrently: 0,09<BR>&nbsp; mean throughput: 192,28 txn/sec,&nbsp; mean latency: 2,82 ms/txn<BR>past 15000 tasks:<BR>&nbsp; mean runtime: 8,09ms,&nbsp; failed: 67,81%<BR>&nbsp; mean ready count: 1359,23,&nbsp; mean lag time: 290,78ms<BR>&nbsp; mean throughput: 125,24 txn/sec,&nbsp; mean latency: 298,87 ms/txn</DIV><BR>and<BR><BR><DIV class="codeheader">Code:</DIV><DIV class="code">Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=47/47<BR>&nbsp; AverageQueueSize=0,00 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=296/406<BR>&nbsp; AverageQueueSize=1,47 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=517/3118<BR>&nbsp; AverageQueueSize=71,54 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=689/3498<BR>&nbsp; AverageQueueSize=155,10 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=1873/4634<BR>&nbsp; AverageQueueSize=1703,98 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=1944/4583<BR>&nbsp; AverageQueueSize=3874,54 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=960/3647<BR>&nbsp; AverageQueueSize=7069,06 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=8&nbsp; Tasks=1184/4021<BR>&nbsp; AverageQueueSize=8280,16 tasks</DIV><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">why is the player state separate from the player object? Can it be accessed and modified independently?</DIV>Yes. Separating player state from <I>Player</I> helped us, but not too much.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">it would be better to pass the object around instead of its reference</DIV>ok : )</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>owen</B> on <B>2009-10-28, 17:16:00</B>
					<HR>
					<DIV style="margin: 0 5ex;">One of the things you need to remember when developing with Project Darkstar is that it is tuned for low latency.&nbsp; This means that you are often sacrificing some throughput in order to achieve this condition.&nbsp; Based on your numbers and as Keith pointed out, it looks like you are overwhelming the system with messages faster than can be processed and it can't achieve the throughput you are looking for.<BR><BR>As a test case, it might be a good idea to try running your app with only one transaction thread.&nbsp; This will remove contention as a variable and will give you an idea of your general maximum task throughput for a single thread on your actual hardware.&nbsp; If you have multiple cores or multiple processors, you can reasonably expect your throughput to increase hopefully close to linearly as you increase threads (up to the number of processors) if you have minimal contention.&nbsp; However, if you are generating messages faster then your maximum throughput can handle, then the queue will grow indefinitely and it doesn't matter whether there is a lot of contention in your tasks or not.&nbsp; It will never catch up.<BR><BR>This is of course, why we are working on multi-node as we'll be able to increase the overall throughput of the entire system with horizontal scaling.&nbsp; Until that is ready, though, you need to take care that your single node deployments are not being overwhelmed with a rate of tasks that it can't possibly handle.</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>nazica</B> on <B>2009-10-28, 18:36:02</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader">Quote</DIV><DIV class="quote">As a test case, it might be a good idea to try running your app with only one transaction thread.</DIV>hm, if we run 40 out crazy test clients, we receive this result:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=49/49<BR>&nbsp; AverageQueueSize=0,00 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=1628/1637<BR>&nbsp; AverageQueueSize=65,77 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=3067/3075<BR>&nbsp; AverageQueueSize=406,73 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=3213/3221<BR>&nbsp; AverageQueueSize=1323,24 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=3247/3251<BR>&nbsp; AverageQueueSize=2433,91 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=3229/3231<BR>&nbsp; AverageQueueSize=3987,40 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=2832/2832<BR>&nbsp; AverageQueueSize=4817,13 tasks<BR><BR>Snapshot[period=10000ms]:<BR>&nbsp; Threads=1&nbsp; Tasks=2908/2910<BR>&nbsp; AverageQueueSize=6137,83 tasks</DIV>If we have only 5 running clients, we don't see raising of taks queue.</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>kbt</B> on <B>2009-10-28, 18:52:39</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader"><A href="http://www.projectdarkstar.com/forum/?topic=1299.msg8834#msg8834">Quote from: nazica on 2009-10-28, 18:36:02</A></DIV><DIV class="quote"><BR>If we have only 5 running clients, we don't see raising of taks queue.<BR></DIV><BR>So from this experiment, the limiting factor is not contention but CPU horsepower. And the limit is somewhere between 5 and 40 clients.</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>nazica</B> on <B>2009-10-28, 19:23:54</B>
					<HR>
					<DIV style="margin: 0 5ex;">we just ran similar test on 4-core Xeon 8 Gb RAM with OS CentOS. Result was not too great. So, we can handle less than 20 our crazy players == 200 real users per node. Hm, not too good. How many players can support wonderland project? Are there any performance tests for that project? <BR>Obviously, 200 players per node for MMO is a very bad result.</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>Tim B</B> on <B>2009-10-28, 19:48:53</B>
					<HR>
					<DIV style="margin: 0 5ex;">Didn't someone run some tests with snowman that had large numbers of simulated players connected to one node?<BR></DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>kbt</B> on <B>2009-10-28, 20:46:24</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader"><A href="http://www.projectdarkstar.com/forum/?topic=1299.msg8837#msg8837">Quote from: Tim B on 2009-10-28, 19:48:53</A></DIV><DIV class="quote">Didn't someone run some tests with snowman that had large numbers of simulated players connected to one node?<BR></DIV><BR>The maximum number of clients per node is influenced by many factors, as one would expect. Obviously, the load per player is important, but often so is the server platform (hardware and operating system). For snowman, which consist of a bunch of instance games, we typically ran with around 3000 clients, this includes an equal number of bots. Of course this was on a four core system running Solaris. I don't know what that number would be on some other platform.<BR><BR>Darkchat, another demo application, would easily handle 10,000 connected clients on similarly configured system. But the application was doing much less processing per client than Snowman.<BR><BR>Now in both of these cases, some amount of work went into getting these numbers. This didn't happen at the first checkin. :)</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>kbt</B> on <B>2009-10-28, 21:44:46</B>
					<HR>
					<DIV style="margin: 0 5ex;">I've been looking at your code, and though it is hard to tell without seeing it all, I wonder if you could improve things by keeping Strings instead of ManagedReferences in some places, particularly in some of the Maps. This is easy if the name is also the object's binding name. It appears that grid cells and players have bound names.<BR><BR>In Darkchat I was storing the ManagedReference for everything everywhere and realized that I rarely used those references. When I switched to storing the String names performance went way up. Doing a DataManager.getBinding() is pretty much the same as ManagedReference.get() for the first time. So as long as you do it once in your task (hence my comment about passing the object and not the reference) your not doing extra work, and you are saving the time in creating all of those references.</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>Vladimir</B> on <B>2009-10-28, 22:21:59</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader">Quote</DIV><DIV class="quote">Didn't someone run some tests with snowman that had large numbers of simulated players connected to one node?</DIV><BR>As I saw with a fast look in Snowman sources all client communications in game room are performed with one channel. I mean that there is no logic like dynamic switching players between channels. One channel per room used. Correct me if I'm wrong. That means that actual server side move processing very simple. We've got nice performance results with simple serverside logic too. (We have a GetServerTime operation which just returns to client current server time). And this kind of tasks works really perfect. But when we have some logic, concurent logic, we are getting really terrible results. <BR><BR>We are asking about Wonderland because it seems to have similar architecture. In Wonderland every visible object based on "Cell", and Cell is a channel. When 2 users can see one another -- both of them connected to channel of other one. Again, if I'm wrong, please correct me. <BR>We are curious about the number of moving users which can be processed by Wonderland because it is important for us to know maximum number of clients which can work stable with our server. Btw, we tested Wonderland (default config on one node) with 4 clients and saw 4 of 800 tasks failed. Our implementation with 4 real clients has the same or sometimes even better result with 0 failed tasks. But stress tests result looks very pessimistic... &nbsp; <BR><BR>And from other side when we have only one connected client we are getting move task execution time ~20-50 ms. But when we have concurency (more than one client) this time grows up to &gt;100 ms.&nbsp; <BR>This is not completely clear too because we thought that if two parallel tasks running at least one will be succefully finished even if the second task will need the same object for lock. What is the correct behaviour?<BR><BR>thanks for your replies: ) <BR><BR>p.s. i'm working on this project with Nazica.<BR></DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>Jeff</B> on <B>2009-10-29, 03:44:19</B>
					<HR>
					<DIV style="margin: 0 5ex;">Unless you are changing channels at a very high frequency, Im temptd to guess that channel use is a red herring.<BR><BR>Im much more interested in four things here:<BR><BR>(1) At what rate are clients triggering events?&nbsp; (eg sending a packet to the server for processing by server side logic)<BR><BR>(2) At what rate are clients sending channel packets that arent processed by server side logic?<BR><BR>(3) What else is causing tasks to be queued, if anything, in your system.<BR><BR>(4) What exactly does the avergae workload look like per task,</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>nazica</B> on <B>2009-10-29, 12:11:47</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader">Quote</DIV><DIV class="quote">Unless you are changing channels at a very high frequency, Im temptd to guess that channel use is a red herring.</DIV>yes, operation of attaching/detaching players to channels goes frequently (because we have a stress-test). But solution without channels at all (spacetree) works poorly too.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">(1) At what rate are clients triggering events?&nbsp; (eg sending a packet to the server for processing by server side logic)</DIV>every player sends a move packet every 100 ms (so, 10 packets per second).<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">(2) At what rate are clients sending channel packets that arent processed by server side logic?</DIV>Client sends session packets only. Server can send session and channel packets. In current test the server sends mostly channel packets.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">(3) What else is causing tasks to be queued, if anything, in your system.</DIV>We don't have any background tasks =&gt; all tasks in the queue is a server reaction on client move packets.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">(4) What exactly does the avergae workload look like per task</DIV>You can see this example for 40 our crazy test users<BR><DIV class="codeheader">Code:</DIV><DIV class="code">com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=240,44ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=1,78ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=14,09ms avgOps=0,00 avgRetries=1,02<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=60,40ms avgOps=0,00 avgRetries=1,13<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=2,20ms avgOps=0,00 avgRetries=1,03<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=3,01ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=4,68ms avgOps=0,00 avgRetries=1,03<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=473,40ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=1,95ms avgOps=0,00 avgRetries=1,03<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=8,88ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=61,03ms avgOps=0,00 avgRetries=1,10<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=2,06ms avgOps=0,00 avgRetries=1,03<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=2,14ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,65ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=4,68ms avgOps=0,00 avgRetries=1,03<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=473,40ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=1,95ms avgOps=0,00 avgRetries=1,03<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=7,47ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=61,46ms avgOps=0,00 avgRetries=1,09<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=2,04ms avgOps=0,00 avgRetries=1,02<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=1,93ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,46ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=4,68ms avgOps=0,00 avgRetries=1,03<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=473,40ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=1,95ms avgOps=0,00 avgRetries=1,03<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=5,40ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=60,03ms avgOps=0,00 avgRetries=1,07<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,79ms avgOps=0,00 avgRetries=1,02<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=1,23ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,43ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=4,68ms avgOps=0,00 avgRetries=1,03<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=473,40ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=1,95ms avgOps=0,00 avgRetries=1,03<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=4,90ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=59,54ms avgOps=0,00 avgRetries=1,06<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=2,10ms avgOps=0,00 avgRetries=1,02<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=1,01ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,31ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=4,68ms avgOps=0,00 avgRetries=1,03<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=473,40ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=1,95ms avgOps=0,00 avgRetries=1,03</DIV><BR>for 20 users<BR><DIV class="codeheader">Code:</DIV><DIV class="code">com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=15,98ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=39,00ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=2,60ms avgOps=0,00 avgRetries=1,02<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=2,21ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=471,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=0,80ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=14,00ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=44,94ms avgOps=0,00 avgRetries=1,06<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=2,38ms avgOps=0,00 avgRetries=1,04<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,86ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=471,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=0,80ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=7,81ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=41,27ms avgOps=0,00 avgRetries=1,04<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,98ms avgOps=0,00 avgRetries=1,04<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=0,00ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,48ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=471,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=0,80ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=6,12ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=39,08ms avgOps=0,00 avgRetries=1,05<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,99ms avgOps=0,00 avgRetries=1,03<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=0,80ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,36ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=471,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=0,80ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=4,39ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=37,55ms avgOps=0,00 avgRetries=1,05<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,88ms avgOps=0,00 avgRetries=1,03<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=0,90ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,35ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=471,10ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=0,80ms avgOps=0,00 avgRetries=1,00</DIV><BR>and for 5 users<BR><DIV class="codeheader">Code:</DIV><DIV class="code">com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=9516,00ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=16,00ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=2,90ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=15,15ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,91ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=2,48ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,70ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,75ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=8980,50ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=4,00ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=2,89ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=16,70ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,78ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=1,78ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,53ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,00ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=10153,20ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=3,20ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=2,41ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=16,86ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,55ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=1,59ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,35ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,00ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=10153,20ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=3,20ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=2,19ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=16,60ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,26ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=1,05ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,25ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,00ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=10153,20ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=3,20ms avgOps=0,00 avgRetries=1,00<BR><BR>com.sun.sgs.impl.service.session.ClientSessionHandler$2[NotifyListenerMessageReceived] avgTime=2,09ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.entity.Player$MoveTask avgTime=16,62ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.task.SendSessionMessageTask avgTime=1,25ms avgOps=0,00 avgRetries=1,01<BR>com.company.project.walkandtalk.task.SendLeaveChannelMessageTask avgTime=0,94ms avgOps=0,00 avgRetries=1,00<BR>com.company.project.walkandtalk.task.SendChannelMessageTask avgTime=1,19ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$LoginTask avgTime=3,00ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=10153,20ms avgOps=0,00 avgRetries=1,00<BR>com.sun.sgs.impl.service.session.ClientSessionHandler$CreateClientSessionTask avgTime=3,20ms avgOps=0,00 avgRetries=1,00</DIV><BR>P.S. we use CAS for authentication, that's why we have a big delay at login task<DIV class="codeheader">Code:</DIV><DIV class="code">com.sun.sgs.impl.service.session.ClientSessionHandler$1[HandleLoginRequest] avgTime=10153,20ms avgOps=0,00 avgRetries=1,00</DIV></DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>stp</B> on <B>2009-10-29, 15:25:57</B>
					<HR>
					<DIV style="margin: 0 5ex;">Looking at the task breakdown you posted, you seem to be spending a lot of time in the move task. As you increase the number of clients, this task is taking much longer, and failing (slightly) more often. This suggests to me that you probably have some data structures or operations that grow increasingly more expensive the more clients you add to your game. Is that the case?<BR><BR>This is definitely going to cause the kind of scaling limitations you've been reporting. If your movement tasks take 60ms, then you're probably only going to get about 60 or 70 processed in a second. It would definitely be worthwhile to figure out what's happening in that task.<BR><BR>Can you elaborate a bit more on your authentication comment? FYI, while blocking on authentication isn't going to affect the pool of transactional threads directly, it may affect the non-transactional pool which is used for other operations in the system. I don't think this is probably causing too much delay, but it would be worth disabling that for the moment just to help isolate the specific problem you're trying to investigate.<BR><BR><BR>seth</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>nazica</B> on <B>2009-10-29, 19:14:24</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader">Quote</DIV><DIV class="quote">you probably have some data structures or operations that grow increasingly more expensive the more clients you add to your game. Is that the case?</DIV>Yes. every grid cell has a scalable list of connected players and when some player enters to a channel, he receives a packet with a list of players, that are connected to this cell:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">&nbsp; &nbsp; public void sendChannelUsersListPacket() {<BR>&nbsp; &nbsp; &nbsp; &nbsp; for (ManagedReference&lt;GridCell&gt; cell : viewport) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Collection&lt;ManagedReference&lt;Player&gt;&gt; playerReferences = cell.get().getPlayers();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;ClientUnit&gt; clientPlayers = new ArrayList&lt;ClientUnit&gt;(playerReferences.size());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (ManagedReference&lt;Player&gt; player : playerReferences) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Player p = player.get();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClientUnit clientUnit = createClientPlayer(p);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clientPlayers.add(clientUnit);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String cellName = cell.get().getCellName();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServerListUsersPacket scuPacket = new ServerListUsersPacket(cellName, clientPlayers);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clientSession.get().send(scuPacket.toByteBuffer());<BR>//&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AppContext.getTaskManager().scheduleTask(new SendSessionMessageTask(clientSession, scuPacket));<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; }</DIV>How this part can be improved?<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">Can you elaborate a bit more on your authentication comment?</DIV>our CAS authentication activates only when player enters to a game. After disabling we have received similar bad results.<BR><BR></DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>Jeff</B> on <B>2009-10-29, 20:11:09</B>
					<HR>
					<DIV style="margin: 0 5ex;">Okay so a few questions:<BR><BR>(1) How big is a "cell"?<BR><BR>(2) Why does every player need a list of all the players in the cell?<BR><BR>Trying to wrap my head around the architecture...</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>Vladimir</B> on <B>2009-10-29, 20:48:09</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader">Quote</DIV><DIV class="quote">(1) How big is a "cell"?<BR></DIV><BR>Cell have the same size or slower than users viewport. Users viewport -- this is the part of game world which user can see. <BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">(2) Why does every player need a list of all the players in the cell?<BR></DIV><BR>Cells in our algorithm is used to broke the world into the small parts and notify user about movements perfomed&nbsp; only&nbsp; by visible to him users. And not to notify all users about all other users in the world. <BR>User need to recieve a list of users alredy connected to Cell when he enters new Cell.<BR><BR><DIV class="quoteheader">Quote</DIV><DIV class="quote">Trying to wrap my head around the architecture...<BR></DIV><BR>It is simple. Pay attention on the first picture in this topic. Just imagine a big static world. You as a player can see it isometric (2+ D). So, size of visible part of the world is always known. Now, we cut this world with the rectangular small pieces. Every this part we call Cell. And users who now in the same part of the world connected to the same Cell(Channel). This cells grid static. And when user moves, his viewport (his visible part of the world)&nbsp; is moved too. <BR>And user(his vieport) may be in more than one(up to 4) cell at the same time. So, when user moves he switched between cells (channels). And when users connected to the same cell(s) they can see one another and recieving notifications. </DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>kbt</B> on <B>2009-10-29, 21:29:26</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader"><A href="http://www.projectdarkstar.com/forum/?topic=1299.msg8851#msg8851">Quote from: nazica on 2009-10-29, 19:14:24</A></DIV><DIV class="quote"><DIV class="quoteheader">Quote</DIV><DIV class="quote">you probably have some data structures or operations that grow increasingly more expensive the more clients you add to your game. Is that the case?</DIV>Yes. every grid cell has a scalable list of connected players and when some player enters to a channel, he receives a packet with a list of players, that are connected to this cell:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">&nbsp; &nbsp; public void sendChannelUsersListPacket() {<BR>&nbsp; &nbsp; &nbsp; &nbsp; for (ManagedReference&lt;GridCell&gt; cell : viewport) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Collection&lt;ManagedReference&lt;Player&gt;&gt; playerReferences = cell.get().getPlayers();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;ClientUnit&gt; clientPlayers = new ArrayList&lt;ClientUnit&gt;(playerReferences.size());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (ManagedReference&lt;Player&gt; player : playerReferences) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Player p = player.get();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClientUnit clientUnit = createClientPlayer(p);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clientPlayers.add(clientUnit);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String cellName = cell.get().getCellName();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServerListUsersPacket scuPacket = new ServerListUsersPacket(cellName, clientPlayers);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clientSession.get().send(scuPacket.toByteBuffer());<BR>//&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AppContext.getTaskManager().scheduleTask(new SendSessionMessageTask(clientSession, scuPacket));<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; }</DIV>How this part can be improved?<BR><BR></DIV><BR>It looks like you are sending the player list for every cell each time this is called. Could you keep track of the cells the player already knows about, and only update the player with the information in the new cells? I would imagine this would reduce processing/messages quite a bit.<BR><BR>BTW, unless you are expecting a lot of players per cell (100's?) the scalable data structures may not be the best choice. It may be a good thing to test.</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>kbt</B> on <B>2009-10-30, 00:14:30</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader"><A href="http://www.projectdarkstar.com/forum/?topic=1299.msg8851#msg8851">Quote from: nazica on 2009-10-29, 19:14:24</A></DIV><DIV class="quote"><DIV class="codeheader">Code:</DIV><DIV class="code">&nbsp; &nbsp; public void sendChannelUsersListPacket() {<BR>&nbsp; &nbsp; &nbsp; &nbsp; for (ManagedReference&lt;GridCell&gt; cell : viewport) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Collection&lt;ManagedReference&lt;Player&gt;&gt; playerReferences = cell.get().getPlayers();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; List&lt;ClientUnit&gt; clientPlayers = new ArrayList&lt;ClientUnit&gt;(playerReferences.size());<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (ManagedReference&lt;Player&gt; player : playerReferences) {<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Player p = player.get();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ClientUnit clientUnit = createClientPlayer(p);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clientPlayers.add(clientUnit);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<BR><BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; String cellName = cell.get().getCellName();<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ServerListUsersPacket scuPacket = new ServerListUsersPacket(cellName, clientPlayers);<BR>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clientSession.get().send(scuPacket.toByteBuffer());<BR>//&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AppContext.getTaskManager().scheduleTask(new SendSessionMessageTask(clientSession, scuPacket));<BR>&nbsp; &nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp; }</DIV>How this part can be improved?<BR></DIV>Thinking about this further, there is potentially a lot of objects accessed in these two loops. So here is something else that I would try - separate each of the updates into its own task. You came close to this with the commented out scheduleTask() call, though I don't think that helped since the all of the object accesses still happen in the same task. My suggestion is to create a task that takes a list of Cells. On each run of the task, it removes a Cell off of the list, process the players in that cell and sends the message. If there are cells left on the list, reschedule yourself. The task will look something like:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">static class SendCellInfoTask implements Task, Serializable {<BR>&nbsp; &nbsp;private final Collection&lt;ManagedReference&lt;GridCell&gt;&gt; cells;<BR><BR>&nbsp; &nbsp;SendCellInfoTask(Collection&lt;ManagedReference&lt;GridCell&gt;&gt; cells, /*anything else you need*/) {<BR>&nbsp; &nbsp;&nbsp; &nbsp; this.cells = cells;<BR>&nbsp; &nbsp;&nbsp; &nbsp; ...<BR>&nbsp; &nbsp;}<BR><BR>&nbsp; &nbsp;public void run() {<BR>&nbsp;&nbsp; &nbsp; &nbsp; Iterator&lt;GridCell&gt; it = cells.iterator();<BR><BR>&nbsp; &nbsp;&nbsp; &nbsp; if (it.hasNext()) {<BR>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; GridCell = cell = it.next().get();<BR>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; it.remove();<BR><BR>&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; // process the cell and send the message<BR>&nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; ...<BR>&nbsp; &nbsp;&nbsp; &nbsp; }<BR><BR>&nbsp;&nbsp; &nbsp; &nbsp; // If there are more cells to process reschedule<BR>&nbsp;&nbsp; &nbsp; &nbsp; if (it.hasNext()) {<BR>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AppContext.getTaskManager().scheduleTask(this);<BR>&nbsp;&nbsp; &nbsp; &nbsp; }<BR>&nbsp; &nbsp;}<BR>}<BR></DIV>And your original sendChannelUserPacket() will look like:<BR><DIV class="codeheader">Code:</DIV><DIV class="code">public void sendChannelUsersListPacket() {<BR>&nbsp; &nbsp; AppContext.getTaskManager().scheduleTask(new SendCellInfoTask(viewport, ...));<BR>}</DIV>What will happen here is that when the SendCellInfoTask is serialized, the viewport Collection will be serialized, creating a snapshot of its state at that time. Then, each time the task is run an element (Cell) will be removed (by the it.remove()) call), and if there are elements remaining, the task will again be serialized, this time with a shorter list.<BR><BR>This should reduce the number of objects accessed in any one task, therefore reducing contention.<BR><BR>This does not reduce the total amount of work being done, so I would still consider my earlier suggestion of skipping the update for cells the player already knows about.</DIV>
					<BR>
					<HR size="2" width="100%">
					Title: <B>Re: Performance problems (huge post, sorry: ) )</B><BR>
					Post by: <B>Jackal von ÖRF</B> on <B>2009-10-30, 03:00:06</B>
					<HR>
					<DIV style="margin: 0 5ex;"><DIV class="quoteheader"><A href="http://www.projectdarkstar.com/forum/?topic=1299.msg8859#msg8859">Quote from: kbt on <B>Today</B> at 00:14:30</A></DIV><DIV class="quote">Thinking about this further, there is potentially a lot of objects accessed in these two loops.<BR></DIV><BR>My theory:<BR><BR><I>sendChannelUsersListPacket</I> reads every Player object in the nearby grid cells, which means that when a player moves from one cell to another, a write lock is acquired on all nearby Player objects.<BR><BR>It looks like <I>movePlayer</I> modifies the Player object (at line <I>playerInst.setViewport(newViewport);</I>), so when a player is moved, a write lock is acquired on the Player object.<BR><BR>Because Darkstar uses pessimistic read-write locks (to achieve serializable isolation level), that one write lock will conflict with all those read locks. When one player moves from a cell to another, it will conflict with any player in those cells who tries to move concurrently. If there is always some player who changes his cell, then the other nearby players will not be able to move.<BR><BR>Try changing the move task so that it will not modify the Player object, and see if it helps. Make sure that the Player object is not accidentally modified - use logging, profiling or whatever means possible (I don't know that how detailed information Darkstar provides about object access).<BR><BR>Would the profiler information be able to tell, that what are the contending locks and which are the conflicting tasks? Now it's only telling that Player$MoveTask has lots of contention, but AFAIK it's not telling that with which other tasks and which objects that contention is happening.</DIV>
					<BR><BR>
					<DIV align="center" class="smalltext">
		<SPAN class="smalltext" style="display: inline; visibility: visible; font-family: Verdana, Arial, sans-serif;"><A href="http://www.simplemachines.org/" title="Simple Machines Forum" target="_blank">Powered by SMF 1.1.5</A> | 
<A href="http://www.simplemachines.org/about/copyright.php" title="Free Forum Software" target="_blank">SMF © 2006-2008, Simple Machines LLC</A>
		</SPAN></DIV>
				</TD>
			</TR>
		</TBODY></TABLE>
					 	</DIV>
				 	<DIV id="right_box" class="right">
						<TABLE cellpadding="0" cellspacing="0" class="moduletable">
			<TBODY><TR>
			<TH valign="top">
				Discussion			</TH>
		</TR>
			<TR>
			<TD>
				
<TABLE width="100%" border="0" cellpadding="0" cellspacing="0">
<TBODY><TR><TD style="background-color: rgb(225, 225, 225); "><A href="http://www.projectdarkstar.com/forum/" class="mainlevel" id="active_menu">Forums</A></TD></TR>
<TR><TD><A href="http://www.projectdarkstar.com/wiki/Blog_Roll?Itemid=148" class="mainlevel">Blog Roll</A></TD></TR>
<TR><TD><A href="http://www.projectdarkstar.com/wiki/Community_To_Do_List?Itemid=149" class="mainlevel">Community To-Do List</A></TD></TR>
<TR><TD><A href="http://www.projectdarkstar.com/wiki/People_Pages?Itemid=153" class="mainlevel">People Pages</A></TD></TR>
<TR><TD><A href="http://www.projectdarkstar.com/wiki/Main_Page?Itemid=154" class="mainlevel">Wiki</A></TD></TR>
</TBODY></TABLE>			</TD>
		</TR>
		</TBODY></TABLE>
	<!-- AddThis Button BEGIN -->

<A href="http://www.addthis.com/bookmark.php" onmouseover="return addthis_open(this, &#39;&#39;, &#39;[URL]&#39;, &#39;[TITLE]&#39;)" onmouseout="addthis_close()" onclick="return addthis_sendto()"><IMG src="./Performance problems_files/lg-share-en.gif" width="125" height="16" border="0" alt=""></A>
<!-- AddThis Button END -->
					</DIV>
                                                                                <DIV class="footer"><A href="http://research.sun.com/" target="_blank"><IMG style="padding-top:0px; padding-bottom: 5px;" border="0" align="right" src="./Performance problems_files/sponsored_sl.6.png" title="Sponsored by Sun Microsystems Laboratories"></A><DIV style="margin:0 auto;width:940px;">
						<A href="mailto:DarkstarCommunityAdmin (at) Sun.Com">Contact Us</A>&nbsp;|&nbsp;
                                                <A href="http://www.projectdarkstar.com/index.php?option=com_content&view=article&id=84&Itemid=203">Privacy Policy</A>&nbsp;|&nbsp;
                                                <A href="http://www.projectdarkstar.com/index.php?option=com_content&view=article&id=122&Itemid=204">Terms of Use</A>&nbsp;|&nbsp;
                                                <A class="snap_noshots" href="http://www.sun.com/suntrademarks/">Trademarks</A>&nbsp;|&nbsp;
                                                <A href="http://www.projectdarkstar.com/index.php?option=com_content&view=article&id=86&Itemid=205">Export</A>&nbsp;|&nbsp;Copyright 2001 - 2009 Sun Microsystems, Inc.</DIV></DIV>


<DIV class="clear"></DIV>
				</DIV>
			</DIV>
					
		</DIV>
		<DIV class="clear"></DIV>


	

</BODY></HTML>